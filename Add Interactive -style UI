This PR introduces a fully functional, responsive, and interactive coding platform interface, inspired by LeetCode and modern dev platforms. The design is clean, user-friendly, and includes core features like:
🌗 Dark/Light mode toggle
🧭 Sidebar navigation
🧠 Tab-based layout for Problem/Solution/Submissions

import React, { useState } from "react";
import { Sun, Moon, Menu } from "lucide-react";

export default function App() {
  const [darkMode, setDarkMode] = useState(false);
  const [activeTab, setActiveTab] = useState("Problem");

  return (
    <div className={`${darkMode ? "dark" : ""} min-h-screen bg-gray-100 dark:bg-zinc-900`}>
      <header className="flex items-center justify-between px-4 py-3 shadow-md bg-white dark:bg-zinc-800">
        <div className="flex items-center gap-3">
          <Menu className="w-6 h-6" />
          <h1 className="text-xl font-bold text-gray-900 dark:text-white">CodeZone</h1>
        </div>
        <div className="flex items-center gap-4">
          <input
            type="text"
            placeholder="Search problems..."
            className="px-3 py-1 rounded-md border dark:bg-zinc-700 dark:text-white"
          />
          <button onClick={() => setDarkMode(!darkMode)}>
            {darkMode ? <Sun className="text-white" /> : <Moon />}
          </button>
        </div>
      </header>

      <div className="flex">
        {/* Sidebar */}
        <aside className="w-64 bg-white dark:bg-zinc-800 p-4 h-screen border-r dark:border-zinc-700">
          <ul className="space-y-3 text-gray-800 dark:text-white">
            <li className="font-semibold">🏠 Dashboard</li>
            <li>📚 Problems</li>
            <li>🧠 Contests</li>
            <li>📈 Submissions</li>
            <li>👤 Profile</li>
          </ul>
        </aside>

        {/* Main Content */}
        <main className="flex-1 p-6">
          <div className="bg-white dark:bg-zinc-800 p-4 rounded-xl shadow-md">
            {/* Tabs */}
            <div className="mb-4 flex gap-6 border-b dark:border-zinc-700">
              {['Problem', 'Solution', 'Submissions'].map(tab => (
                <button
                  key={tab}
                  onClick={() => setActiveTab(tab)}
                  className={`pb-2 ${activeTab === tab ? 'border-b-2 border-blue-500 text-blue-500' : 'text-gray-600 dark:text-gray-300'}`}
                >
                  {tab}
                </button>
              ))}
            </div>

            {/* Tab Content */}
            {activeTab === "Problem" && (
              <div className="text-gray-800 dark:text-white">
                <h2 className="text-lg font-semibold">Two Sum</h2>
                <p className="mt-2 text-sm">
                  Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
                </p>
              </div>
            )}
            {activeTab === "Solution" && (
              <div className="text-gray-800 dark:text-white">
                <h2 className="text-lg font-semibold">Optimized Approach</h2>
                <pre className="mt-2 bg-zinc-900 text-green-300 p-4 rounded-lg text-sm overflow-auto">
{`function twoSum(nums, target) {
  const map = new Map();
  for (let i = 0; i < nums.length; i++) {
    const complement = target - nums[i];
    if (map.has(complement)) {
      return [map.get(complement), i];
    }
    map.set(nums[i], i);
  }
}`}
                </pre>
              </div>
            )}
            {activeTab === "Submissions" && (
              <div className="text-gray-800 dark:text-white">
                <p className="text-sm">You haven't submitted any solutions yet.</p>
              </div>
            )}
          </div>
        </main>
      </div>
    </div>
  );
}
